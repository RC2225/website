---
import fs from "fs";
const { name, image, profile } = Astro.props;

let {
    image,
    name = new URL(image).pathname.split("/").pop(),
    size = 50,
    alt = "Image could not be loaded",
    ...props
}: Props = Astro.props;

if (!name) {
    throw `[astro-preload] name not provided and cannot be extracted from the url ${image}.\nPlease, provide a name.`;
}

if (!props.width && !props.height) {
    props.width = props.height = size;
}

// Download only on production to avoid downloading multiple times
if (process.env.NODE_ENV === "production" && !image.startsWith("/")) {
    try {
        const preloadDir = "public/preloaded/roundicon";
		const preloadBuildDir = "build/preloaded/roundicon";
        const path = `${preloadDir}/${name}`;
		const buildPath  = `${preloadBuildDir}/${name}`;

        if (!fs.existsSync(path)) {
            if (!fs.existsSync(preloadDir)){
                fs.mkdirSync(preloadDir, { recursive: true });
            }
            const response = await fetch(image);
            const blob = await response.blob();

            fs.writeFileSync(
                path,
                new Uint8Array(await blob.arrayBuffer())
            );
            console.log(
                `[astro-preload]: Downloaded image ${name} into ${path}`
            );
        }
        if (!fs.existsSync(path)) {
            if (!fs.existsSync(preloadBuildDir)){
                fs.mkdirSync(preloadBuildDir, { recursive: true });
            }
            const response = await fetch(image);
            const blob = await response.blob();

            fs.writeFileSync(
                buildPath,
                new Uint8Array(await blob.arrayBuffer())
            );
            console.log(
                `[astro-preload]: Downloaded image ${name} into ${buildPath}`
            );
        }

        image = import.meta.env.BASE_URL + `preloaded/roundicon/${name}`;
    } catch {
        console.log(
            `[astro-preload]: Failed to load image '${name}', fallback to using '${image}'`
        );
    }
}
---

<li class="flex hover:scale-125 duration-300">
  <a href={profile}>
    <img src={image} class="rounded-full !h-8 !w-8 object-cover" alt={name}  />
  </a>
</li>
